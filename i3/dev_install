#!/bin/sh
clear;
#Local globals-------------------------------------------------------------------------------------------------------------------------------------------------------
USER="wisp"; #Edit this to your username
#-----------------------------------------------------------------------Development tools------------------------------------------------------------------------
#Vulkan SDK----------------------------------------------------------------------------------------------------------------------------------------------------------
#Download Vulkan SDK from: https://vulkan.lunarg.com/sdk/home
# - Create folder for SDK files, and enter it
# - "tar zxf $PATH_TO_FILE/vulkansdk-linux-x86_64-1.1.xx.y.tar.gz"
#  - Run => $SDK_PATH/1.1.xx.y/setup-env.sh
pacman -S --noconfirm vulkan-devel; #Vulkan development package group
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Tensorflow(GPU) - Python ---------------------------------------------------------------------------------------------------------------------------------------
#More info -> https://www.tensorflow.org/install/install_sources
pacman -S --noconfirm python-pip; #Must have - Needed to install tensorflow-gpu
pacman -S --noconfirm swig; #Must have - Scripting interface to C/C++ code
pacman -U --noconfirm https://archive.archlinux.org/packages/g/gcc6-libs/gcc6-libs-6.4.1-5-x86_64.pkg.tar.xz; #Must have - CUDA/cuDNN dependancy
pacman -U --noconfirm https://archive.archlinux.org/packages/g/gcc6/gcc6-6.4.1-5-x86_64.pkg.tar.xz; #Must have - CUDA/cuDNN dependancy
pacman -U --noconfirm https://archive.archlinux.org/packages/c/cuda/cuda-9.0.176-4-x86_64.pkg.tar.xz; #Must have - CUDA v9.0 - Recommended version
pacman -U --noconfirm https://archive.archlinux.org/packages/c/cudnn/cudnn-7.0.5-2-x86_64.pkg.tar.xz; #Must have - cuDNN v7.0 - Recommended version
pip3 install -U tensorflow-gpu; # Tensorflow
#Add to pacman ignore list--------------------------------------------------------------------------------------------------------------------------------------
LineCount=1
while read line; do
  LineCount=$(($LineCount + 1))
  if [[ $line = *"IgnorePkg"* ]]; then
    break
  fi
done < /etc/pacman.conf
sed -ie ""$LineCount"s/.*/IgnorePkg = cuda cudnn/g"  /etc/pacman.conf
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------Virtualization technology---------------------------------------------------------------------
#Enable IOMMU on kernel boot (Intel)-------------------------------------------------------------------------------------------------------------------------
LineCount=0
while read line; do
  LineCount=$(($LineCount + 1))
  if [[ $line = *"GRUB_CMDLINE_LINUX_DEFAULT"* ]]; then
    NewText=$(echo $line | head -c-2)" intel_iommu=on iommu=pt\""
    break
  fi
done < /etc/default/grub
sed -ie $LineCount"s/.*/$NewText/g"  /etc/default/grub; #Edit grub config
grub-mkconfig -o /boot/grub/grub.cfg; #Regenerate boot config
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Install dependencies----------------------------------------------------------------------------------------------------------------------------------------------
pacman -S --noconfirm qemu libvirt ovmf; #Must have
pacman -S --noconfirm virt-manager; #Virtual machine manager GUI
#Add nvram location to qemu config--------------------------------------------------------------------------------------------------------------------------
TagFound="false"
LineCount=0
while read line; do
  LineCount=$(($LineCount + 1))
  if [[ $TagFound = "true" ]]; then
    if [[ $line = "" ]]; then
      break
    fi
  fi
  if [[ $line = *"#nvram"* ]]; then
    TagFound="true"
  fi
done < /etc/libvirt/qemu.conf
TextToAdd="nvram = [\"\/usr\/share\/ovmf\/x64\/OVMF_CODE\.fd\:\/usr\/share\/ovmf\/x64\/OVMF_VARS\.fd\"]\n"
sed -ie ""$LineCount"s/.*/$TextToAdd/g" /etc/libvirt/qemu.conf
#Passing VM audio to host via PulseAudio-------------------------------------------------------------------------------------------------------------------
TagFound="false"
LineCount=0
while read line; do
  LineCount=$(($LineCount + 1))
  if [[ $TagFound = "true" ]]; then
    if [[ $line = "" ]]; then
      break
    fi
  fi
  if [[ $line = *"#user"* ]]; then
    TagFound="true"
  fi
done < qemu.conf
TextToAdd="user = \"$USER\"\n"
sed -ie ""$LineCount"s/.*/$TextToAdd/g" qemu.conf
usermod -aG libvirt $USER; #Add default user to libvirt group
systemctl enable libvirtd.service; systemctl start libvirtd.service; #Enable virtualization service
#Networkworking----------------------------------------------------------------------------------------------------------------------------------------------------
pacman -S --noconfirm firewalld dnsmasq; #Packages
systemctl enable firewalld.service; systemctl start firewalld.service; #Enable service
firewall-cmd --permanent --zone=public --add-port=8080/tcp; #Open port for VLC remote controll
virsh net-autostart default; #Autostart default virtual network
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
